package sem1;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.util.ArrayList;
import java.util.List;

public class Homework {
    public static void main(String[] args) {
        //printPrimeNums();
        //System.out.println(calculate('+', 3, 2));
        //System.out.println(parseString("aaaabbbcdd"));
        //System.out.println(isPalindrom("–ê —Ä–æ–∑–∞ —É–ø–∞–ª–∞ –Ω–∞ –ª–∞–ø—É –ê–∑–æ—Ä–∞"));
        System.out.println(getSolution("file.txt"));
    }

    /**
     * –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é printPrimeNums, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–≤–µ–¥–µ—Ç –Ω–∞ —ç–∫—Ä–∞–Ω –≤—Å–µ –ø—Ä–æ—Å—Ç—ã–µ
     * —á–∏—Å–ª–∞ –≤ –ø—Ä–æ–º–µ–∂—É—Ç–∫–µ –æ—Ç 1 –¥–æ 1000, –∫–∞–∂–¥–æ–µ –Ω–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ.
     * <p>
     * –ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –∫–æ–¥ –≤ –º–µ—Ç–æ–¥–µ printPrimeNums –∫–ª–∞—Å—Å–∞ Answer.
     */
    public static void printPrimeNums() {
        boolean flag = true;
        for (int i = 1; i < 1000; i++) {
            flag = true;
            for (int j = 2; j <= i / 2 + 1; j++) {
                //System.out.println("" + i + " " + j);
                if (i % j == 0) {
                    flag = false;
                    break;
                }
            }
            if (flag || i == 2) {
                System.out.println(i);
            }
        }
    }

    /**
     * –ù–∞–ø–∏—à–∏—Ç–µ –∫–ª–∞—Å—Å Calculator, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ
     * –æ–ø–µ—Ä–∞—Ü–∏–∏ (+, -, *, /) –Ω–∞–¥ –¥–≤—É–º—è —á–∏—Å–ª–∞–º–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç.
     * –í –∫–ª–∞—Å—Å–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–µ—Ç–æ–¥ calculate, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä
     * –∏ –∑–Ω–∞—á–µ–Ω–∏—è –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã—á–∏—Å–ª–µ–Ω–∏–π.
     * <p>
     * –ü—Ä–∏ –Ω–µ–≤–µ—Ä–Ω–æ –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–º –æ–ø–µ—Ä–∞—Ç–æ—Ä–µ, –ø—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–≤–µ—Å—Ç–∏
     * —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ–ø–µ—Ä–∞—Ç–æ—Ä: '–æ–ø–µ—Ä–∞—Ç–æ—Ä'".
     */
    public static int calculate(char op, int a, int b) {
        switch (op) {
            case '+':
                return a + b;
            case '-':
                return a - b;
            case '*':
                return a * b;
            case '/':
                return a / b;
            default:
                System.out.printf("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ–ø–µ—Ä–∞—Ç–æ—Ä: %c", op);
        }
        return 0;
    }

    /**
     * üìî –ù–∞–ø–∏—à–∏—Ç–µ –º–µ—Ç–æ–¥, –∫–æ—Ç–æ—Ä—ã–π —Å–∂–∏–º–∞–µ—Ç —Å—Ç—Ä–æ–∫—É. –ü—Ä–∏–º–µ—Ä: –≤—Ö–æ–¥ aaaabbbcdd.
     */
    public static String parseString(String str) {
        int count = 0;
        char ch = str.charAt(0);
        String result = "" + ch;
        for (int i = 0; i < str.length(); i++) {
            if (ch == str.charAt(i)) {
                count++;
            } else {
                result = result + count + str.charAt(i);
                count = 1;
                ch = str.charAt(i);
            }
        }

        result = result + count;
        return result;
    }

    /**
     * –ù–∞–ø–∏—à–∏—Ç–µ –º–µ—Ç–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –Ω–∞ –≤—Ö–æ–¥ —Å—Ç—Ä–æ–∫—É (String)
     * –∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ –ø–∞–ª–∏–Ω–¥—Ä–æ–º–æ–º (–≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç boolean –∑–Ω–∞—á–µ–Ω–∏–µ).
     */
    public static boolean isPalindrom(String str) {
        String newString = str.replace(" ", "").toLowerCase();
        StringBuilder sb = new StringBuilder(newString).reverse();
        return newString.equals(sb.toString());
    }

    /**
     * –í —Ñ–∞–π–ª–µ –∑–∞–¥–∞–Ω–æ —É—Ä–∞–≤–Ω–µ–Ω–∏–µ –≤–∏–¥–∞ q + w = e (q, w, e >= 0).
     * –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ü–∏—Ñ—Ä—ã –º–æ–≥—É—Ç –±—ã—Ç—å –∑–∞–º–µ–Ω–µ–Ω—ã –∑–Ω–∞–∫–æ–º –≤–æ–ø—Ä–æ—Å–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä 2? + ?5 = 69.
     * –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–æ –≤–µ—Ä–Ω–æ–≥–æ —Ä–∞–≤–µ–Ω—Å—Ç–≤–∞.
     * –ü—Ä–µ–¥–ª–æ–∂–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ —Ä–µ—à–µ–Ω–∏–µ –∏–ª–∏ —Å–æ–æ–±—â–∏—Ç–µ, —á—Ç–æ –µ–≥–æ –Ω–µ—Ç.
     * –ù–∞–ø–∏—à–∏—Ç–µ –∫–ª–∞—Å—Å Equation, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –º–µ—Ç–æ–¥ getSolution, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç
     * —Å—á–∏—Ç—ã–≤–∞—Ç—å —É—Ä–∞–≤–Ω–µ–Ω–∏–µ –∏–∑ —Ñ–∞–π–ª–∞ –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç –µ–≥–æ –¥–æ –≤–µ—Ä–Ω–æ–≥–æ —Ä–∞–≤–µ–Ω—Å—Ç–≤–∞.
     * –í—ã–≤–µ–¥–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞ —Å—Ç—Ä–æ–∫—É —Ñ–æ—Ä–º–∞—Ç–∞ "Given the equation: {–≤—ã—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ —Ñ–∞–π–ª–∞}".
     * –ê –∑–∞—Ç–µ–º –≤–µ—Ä–Ω–∏—Ç–µ —Å—Ç—Ä–æ–∫—É —Ñ–æ—Ä–º–∞—Ç–∞ "Result: {—Ü–µ–ª—å–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ}".
     * –ï—Å–ª–∏ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –∏–º–µ–µ—Ç —Ä–µ—à–µ–Ω–∏–π - –≤–µ—Ä–Ω–∏—Ç–µ —Å—Ç—Ä–æ–∫—É "No solution".
     */
    public static String getSolution(String str) {
        String equation = readFile(str).strip();
        System.out.printf("Given the equation: %s", equation);
        System.out.println();
        List<String> partsOfEquation = devideEquation(equation);
        return getFinalString(partsOfEquation);
    }

    public static String getFinalString(List<String> partsOfEquation) {
        int numbers = (int) Math.pow(10, partsOfEquation.size() - 1);
        StringBuilder sb = new StringBuilder();
        int index = 0;
        for (int i = 0; i < numbers; i++) {
            index = i;
            sb.append(partsOfEquation.get(0));
            for (int j = 1; j < partsOfEquation.size(); j++) {
                sb.append(index % 10);
                index /= 10;
                sb.append(partsOfEquation.get(j));
            }
            if (checkOfEquation(sb.toString())) {
                sb.insert(0, "Result: ");
                return sb.toString();
            }
            sb.delete(0, sb.length());
        }
        return "No solution";
    }

    public static List<String> devideEquation(String equation) {
        int index = 0;
        List<String> partsOfEquation = new ArrayList<>();
        for (int i = 0; i < equation.length(); i++) {
            if (equation.charAt(i) == '?') {
                partsOfEquation.add(equation.substring(index, i));
                index = i + 1;
            }
        }
        partsOfEquation.add(equation.substring(index));
        return partsOfEquation;
    }

    public static boolean checkOfEquation(String str) {
        String[] array = str.split(" ");
        int a = Integer.parseInt(array[0]);
        int b = Integer.parseInt(array[2]);
        int c = Integer.parseInt(array[4]);
        return a + b == c;
    }

    public static String readFile(String str) {
        File file = new File(str);
        String line = "";
        try (BufferedReader in = new BufferedReader(new FileReader(str))){
            line = in.readLine();
        } catch (Exception e) {
            e.printStackTrace();
        }
        return line;
    }
}
